{
  "created_at": "May 11, 2020 5:14 PM",
  "title": "Building a static-site generator called Hydrogen ðŸŽˆ",
  "summary": "Hydrogen is an ultra-lightweight static-site generator that aims to get out of the way of the developer experience ",
  "body": "![Hero](https://miro.medium.com/max/673/1*G70NEZTFDZ0Xp5htqcqTRw.jpeg \"Hero\")\n\nStatic-site generators have been around for a while, itâ€™s nothing new. In actual fact, there is a list of 100s of these tools which you can find on https://www.staticgen.com/\n\n## So what is a static-generator?\n\nAn SSG (static-site generator) is essentially a tool which makes use of a templating engine which spits out static HTML files. Below are some examples of taking a form of markup and converting it to HTML.\n\n* `index.md` -> `index.html`\n* `index.pug` -> `index.html`\n* `index.hbs` -> `index.html`\n* `index.vue` -> `index.html`\n* `index.js` -> `index.html`\n\nYou get the idea, you can give an SSG the required format and its job is to essentially spit out the generated markup in HTML.\n\n- - -\n\n## Introducing Hydrogen\n\nHydrogen is probably the lightest static-site generator built with TypeScript. It uses JavaScript Template Literals as a templating engine which makes it unbelievably fast. Itâ€™s focused purely on taking Template Literals and transforming them into HTML files, most SSGs provides too many overhead features that slow the SSG down. Essentially you can build anything on top of it as you have access to the vast JavaScript ecosystem.\n\n### Why JavaScript as a templating engine?\n\nBefore ES6, JavaScript was not considered powerful enough to manipulate large chunks of the DOM and template engines like Handlebars and Pug filled that void.\n\n#### ES5\n\n```javascript\nfunction h1(content) {\n  return '<h1>' + content + '</h1>';\n}\n```\n\n#### ES6\n\n```javascript\nconst h1 = (content) => `<h1>${content}</h1>`;\n```\n\nIf you compare the two versions of JavaScript expressing the same function, the ES6 version wins hands down. ES6 was a massive game-changer for JS developers giving us so much more power than ever.\n\n### How does using JS as a templating engine make it so fast?\n\nAs we are running Hydrogen in a Node.js environment which is a server-side JavaScript runtime, Template Literals is already baked into the JS language and well optimized. Using a template engine like Pug is relatively slower compared to the native template literals.\n\n### A quick demo\n\nFirst, we need to install the Hydrogen CLI via Yarn or NPM\n\n```shell\nyarn add hydrogen-cli\n```\n\nCreate an `index.js` file in your root directory.\n\n```javascript\nconst page = ({ title, head, data }) => `\n  <!DOCTYPE html>\n  <html>\n    <head>\n      <title>${title}</title>\n      ${head}\n    </head>\n    <body>\n      <p>${data.text}</p>\n    </body>\n  </html>\n`;\n\nmodule.exports = {\n  title: 'Hydrogen',\n  page,\n  data: () => ({\n    text: 'Hydrogen: Static-site generator',\n  }),\n  head: ({ data }) => [\n   ['meta', { name: 'description', content: data.text }],\n  ],\n};\n```\n\nRun this command to convert the template to HTML\n\n```shell\nnpx hydrogen generate index.js\n```\n\nOutputs `index.html`\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hydrogen</title>\n    <meta name=\"description\" content=\"Hydrogen: Static-site generator\">\n  </head>\n  <body>\n    <p>Hydrogen: Static-site generator</p>\n  </body>\n</html>\n```\n\nBuild time: *~29.550ms*\n\nThe `hydrogen generate` command is used to compile simple templates but what if you want to set up a larger project with multiples pages, and static assets. You would need the `build` command.\n\nCheck out the documentation for the full details: [hydrogenjs.org](https://hydrogenjs.org)"
}