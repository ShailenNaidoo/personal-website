//Grid

// Set Grid (1170gs default)
$column-width: 70px;
$gutter: 30px;
$columns: 12;
$padding: $gutter / 2;

// Should it be responsive?
$responsive: true;

// Set container width relative to user variables
$width: ($column-width * $columns) + ($gutter * ($columns - 1));

// Set Base Container
.row
{
// Set container width if responsive
@if $responsive == true
   {
  max-width:$width;
   }
@else
   {
  width:$width;
   }
margin:0px auto;
padding: 0 $padding 0 $padding;
}

// Define Individual Grid Classes
@for $i from 1 to $columns
{
  // Calculate grid size in pixels
  $grid: ($column-width * $i) + ($gutter * ($i - 1));

  // Calculate responsive grid sizes if required
  @if $responsive == true
  {
    // Calculate grid size in pixels
    $grid: ($grid / $width) * 100%;

    // Get Gutter Percentage for Grids
    $gutter-percentage: ($gutter / $width) * 100%;

    .grid#{$i}
      {
      width: $grid;
      float: left;
      margin-left:$gutter-percentage;
      }
  }
  @else
  {
    $grid: $grid;
    .grid#{$i}
      {
      width: $grid;
      float: left;
      margin-left:$gutter;
      }
  }
}

.row {
  @include rem(padding, 40px 0);
  @extend %clearfix;
  position: relative;
}

.clear {
  margin-left: 0px !important;
  clear: left;
}
.clearB {
  clear:both;
  min-height: 50px;
  .size-cont {
    float:right;
    .switch-view {
      margin:0;
    }
  }
}
// Breakpoints

/// @example scss - Usage
/// @include breakpoint('40em');

@mixin breakpoint($size) {
  @media only screen and (min-width: $size) {
    @content;
  }
}

@mixin inverse-breakpoint($size) {
  @media only screen and (min-width: $size) {
    @content;
  }
}

div[class*="grid"] {
  @extend %clearfix;

  @include breakpoint(62.5em) {
    float: none;
    width: 100%;
    margin-left: 0;
    margin-bottom: 15px;
  }

}